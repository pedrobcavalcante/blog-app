name: Flutter CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/configure-pipeline
  pull_request:
    branches:
      - main
      - feature/configure-pipeline

jobs:
  build_android:
    name: Build Android APK
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1. Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Configurar o JDK 17
      - name: Set up JDK 17
        run: |
          sudo apt update
          sudo apt install openjdk-17-jdk -y

      # 3. Configurar o Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.5"

      # 4. Instalar dependências do Flutter
      - name: Install Flutter Dependencies
        run: flutter pub get

      # 5. Executar Testes Unitários
      - name: Run Unit Tests
        run: |
          echo "Running Flutter Unit Tests..."
          flutter test --coverage

      # 6. Criar google-services.json a partir do JSON salvo no GitHub Secrets
      - name: Create google-services.json
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json

      # 7. Validar google-services.json
      - name: Validate google-services.json
        run: |
          echo "Validating google-services.json..."
          cat android/app/google-services.json | jq empty && echo "google-services.json is valid!"

      # 8. Build do APK em modo release
      - name: Build Android APK
        run: flutter build apk --release

      # 9. Upload do APK como artefato
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      # 10. Upload do Relatório de Cobertura
      - name: Upload Test Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: flutter-test-coverage
          path: coverage/lcov.info

      # 11. Criar Tag e Release no GitHub
      - name: Extract App Version
        id: get_version
        run: |
          APP_VERSION=$(grep '^version: ' pubspec.yaml | sed 's/version: //g' | tr -d '\r')
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.APP_VERSION }}"
          release_name: "Release v${{ env.APP_VERSION }}"
          body: |
            Release generated by CI/CD pipeline.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 12. Upload do APK no Release
      - name: Upload APK to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: "v${{ env.APP_VERSION }}"
          file: build/app/outputs/flutter-apk/app-release.apk
          asset_name: app-release-v${{ env.APP_VERSION }}.apk
